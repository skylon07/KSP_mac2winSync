// Version: 3 (2018-09-18)
// If this file is EN-US localization, then only change the version when a new
// string is added or an existing removed.
// If it's any other language, then this number tells if there are differences.
// Go thru the file and sync it with the EN-US file so that the number and the
// values of the localization tags match. Once this is done, sync the version.
// Author: Supercheese
Localization
{
	en-us
	{

		// ********** Part: KAS.CH1

		#KAS_CH1_Part_title = CH-1 Cable Hook
		#KAS_CH1_Part_manufacturer = KAS Labs, Inc.
		#KAS_CH1_Part_description = A hook that a cable can clip onto. It's the other half of the "keep-these-things-together" solution.
		#KAS_CH1_Part_tags = KIS KAS cable rope tie cck-kas

		// ********** Part: KAS.JS1

		#KAS_JS1_Part_title = JS-1 Joint Socket
		#KAS_JS1_Part_manufacturer = KAS Labs, Inc.
		#KAS_JS1_Part_description = This multi-purpose socket has a variety of features: it allows a firm connection and provides for the transfer of resources! A certified engineer with multiple years of experience is required to install this socket, but once attached, even a janitor can use it to connect vessels.
		#KAS_JS1_Part_tags = KIS KAS pipe tube cck-kas

		// ********** Part: KAS.PCB1

		#KAS_PCB1_Part_title = PCB-1 Portable Cable Bracing
		#KAS_PCB1_Part_manufacturer = KAS Labs, Inc.
		#KAS_PCB1_Part_description = It's a simple manually-operated winch with a small spool of steel cable, which lets you connect things as long as they are not too far away. There must be a hook on the other vessel on which to attach the cable, however, so this winch only solves half the problem.
		#KAS_PCB1_Part_tags = KIS KAS cable rope tie cck-kas
		#KAS_PCB1_Part_LinkBreak = Unlink
		#KAS_PCB1_Part_LinkStart = Link

		// ********** Part: KAS.RTS1

		#KAS_RTS1_Part_title = RTS-1 Resource Transfer Station
		#KAS_RTS1_Part_manufacturer = KAS Labs, Inc.
		#KAS_RTS1_Part_description = This pipe allows for the transfer of resources between vessels. The diameter is not that impressive, but as a small green fellow once said, "Size matters not." Our patented technology allows the transfer of any number of things through it, including, but not limited to: rocks, fuel, snacks, and even kerbals. Warranty void in the latter case.
		#KAS_RTS1_Part_tags = KIS KAS resource fuel transfer cck-kas

		// ********** Part: KAS.TB60

		#KAS_TB60_Part_title = TB-60 Tow Bar
		#KAS_TB60_Part_manufacturer = KAS Labs, Inc.
		#KAS_TB60_Part_description = A simple solution for towing a vessel that cannot move by itself. If a simple rope were to be used, then the vessel under tow would likely impact the towing craft when braking or maneuvering, but with the towbar this is not the case. Moreover, it can assist in steering the towed vessel, if applicable. Be sure to keep the batteries fresh, else the active steering won't work.
		#KAS_TB60_Part_tags = KIS KAS pipe tube tow towbar cck-kas
		#KAS_TB60_Part_LinkBreak = Disconnect vessels
		#KAS_TB60_Part_LinkStart = Attach to a vessel
		#KAS_TB60_Part_Park_Forward = Park: FORWARD
		#KAS_TB60_Part_Park_Up = Park: UP

		// ********** Part: KAS.TJ1

		#KAS_TJ1_Part_title = TJ-1 Fixed Telescopic Joint
		#KAS_TJ1_Part_manufacturer = KAS Labs, Inc.
		#KAS_TJ1_Part_description = This simple telescoping strut can rigidly connect two vessels. The maximum connection distance is fairly short, but its strength is adequate. The design was inspired by a selfie stick Jeb bought at a thrift store.
		#KAS_TJ1_Part_tags = KIS KAS pipe tube cck-kas
		#KAS_TJ1_Part_LinkBreak = Disconnect vessels
		#KAS_TJ1_Part_LinkStart = Attach to a vessel
		#KAS_TJ1_Part_Park_Down = Park: DOWN
		#KAS_TJ1_Part_Park_Forward = Park: FORWARD
		#KAS_TJ1_Part_Park_Up = Park: UP

		// ********** Part: KAS.TJ2

		#KAS_TJ2_Part_title = TJ-2 Free Telescopic Joint
		#KAS_TJ2_Part_manufacturer = KAS Labs, Inc.
		#KAS_TJ2_Part_description = It's the same TJ-1 "Selfie Stick", except the hinges are unlocked. Truly the best solution to keep connected vessels separated from each other, yet not overly restricting their movements.
		#KAS_TJ2_Part_tags = KIS KAS pipe tube cck-kas
		#KAS_TJ2_Part_LinkBreak = Disconnect vessels
		#KAS_TJ2_Part_LinkStart = Attach to a vessel
		#KAS_TJ2_Part_Park_Down = Park: DOWN
		#KAS_TJ2_Part_Park_Forward = Park: FORWARD
		#KAS_TJ2_Part_Park_Up = Park: UP

		// ********** Part: KAS.W1

		#KAS_W1_Part_title = W-50 Winch
		#KAS_W1_Part_manufacturer = KAS Labs, Inc.
		#KAS_W1_Part_description = An ancient sage once said: "Give me the right socket, and with a winch I'll pull Kerbin". This winch is not quite that strong, though it can lift up or tow a rather bulky vessel. Remember to attach a compatible socket on the target craft. Also, make sure there is enough power on the active vessel: the winch is hungry for electricity!
		#KAS_W1_Part_tags = KIS KAS winch cable connector cck-kas

		// ********** Part: KAS.W2

		#KAS_W2_Part_title = HW-80 Winch
		#KAS_W2_Part_manufacturer = KAS Labs, Inc.
		#KAS_W2_Part_description = A heavy duty version of the W-50 winch model. It has extra cable and features improved connection strength. However, it still cannot pull Kerbin. Note: warranty void if winches are used to winch witches, and it doesn't matter which winch or which witch.
		#KAS_W2_Part_tags = KIS KAS winch cable connector heavyduty cck-kas

		// ********** Part: KAS.PortPylon
		#KAS_PortPylon_Part_title = GP-20 Pylon
		#KAS_PortPylon_Part_manufacturer = KAS Labs, Inc.
		#KAS_PortPylon_Part_description = Our RTS-1 product line was a huge success! However, there were a couple complaints; it turns out that sometimes the pipe just isn't long enough! To solve this problem, a new part was developed: a lightweight pylon with a built-in pipe socket, allowing it to act as an extender. It is thus feasible to chain resource links across long distances, though to do so, you might need to construct additional pylons. Jeb really wanted to add a Kerba-Cola refrigerator to the hollow interior, but R&D had to reject his suggestion due to a strict 20kg mass limit.
		#KAS_PortPylon_Part_tags = KAS resource fuel transfer cck-kas

		// ********** Part: KAS.PortPylonPwr
		#KAS_PortPylonPwr_Part_title = BGP-400 Pylon on Steroids
		#KAS_PortPylonPwr_Part_manufacturer = KAS Labs, Inc.
		#KAS_PortPylonPwr_Part_description = This part's design was inspired by the GP-20. Our engineers needed to know: could the internal volume of the pylon really be utilized? It turns out that it can! As such, they decided to fill it with some Z-100 batteries and a simple control module. It's not quite as cool as a Kerba-Cola fridge, as Jeb had requested, but it's still very practical. Rest assured that the batteries are of the finest quality, and not merely salvaged from the recycle bin.
		#KAS_PortPylonPwr_Part_tags = KAS resource fuel transfer cck-kas

		// ********** Type: KAS.AbstractJoint, KSPDev Messages

		// Message to display when the link cannot be established because it's too short.
		// Argument <<1>> is the current link length of type DistanceType.
		// Argument <<2>> is the part's config setting of type DistanceType.
		// Example usage:
		// Link is too short: 1.22 m < 2.33 m
		#kasLOC_00000 = Link is too short: <<1>> < <<2>>
		// Message to display when the link cannot be established because it's too long.
		// Argument <<1>> is the current link length of type DistanceType.
		// Argument <<2>> is the part's config setting of type DistanceType.
		// Example usage:
		// Link is too long: 2.33 m > 1.22 m
		#kasLOC_00001 = Link is too long: <<1>> > <<2>>
		// Message to display when the link cannot be established because the maximum angle
		// between the link vector and the joint normal at the SOURCE part is to big.
		// Argument <<1>> is the current link angle of type AngleType.
		// Argument <<2>> is the part's config setting of type AngleType.
		// Example usage:
		// Source angle limit reached: 3° > 2.5°
		#kasLOC_00002 = Source angle limit reached: <<1>> > <<2>>
		// Message to display when the link cannot be established because the maximum angle
		// between the link vector and the joint normal at the TARGET part is to big.
		// Argument <<1>> is the current link angle of type AngleType.
		// Argument <<2>> is the part's config setting of type AngleType.
		// Example usage:
		// Target angle limit reached: 3° > 2.5°
		#kasLOC_00003 = Target angle limit reached: <<1>> > <<2>>
		// Info string in the editor for the link break force setting. The argument is of
		// type ForceType.
		// Example usage:
		// Link break force: 1.2 kN
		#kasLOC_00004 = Link break force: <<1>>
		// Info string in the editor for the link break torque setting. The argument is of
		// type ForceType.
		// Example usage:
		// Link torque force: 1.2 kN
		#kasLOC_00005 = Link torque force: <<1>>
		// Info string in the editor for the minimum link length setting.
		// Argument <<1>> is the part's config setting of type DistanceType.
		// Example usage:
		// Minimum link length: 1.22 m
		#kasLOC_00006 = Minimum link length: <<1>>
		// Info string in the editor for the maximum link length setting.
		// Argument <<1>> is the part's config setting of type DistanceType.
		// Example usage:
		// Maximum link length: 1.22 m
		#kasLOC_00007 = Maximum link length: <<1>>
		// Info string in the editor for the maximum allowed angle at the source.
		// Argument <<1>> is the part's config setting of type AngleType.
		// Example usage:
		// Source angle limit: 1.2°
		#kasLOC_00008 = Source angle limit: <<1>>
		// Info string in the editor for the maximum allowed angle at the target.
		// Argument <<1>> is the part's config setting of type AngleType.
		// Example usage:
		// Target angle limit: 1.2°
		#kasLOC_00009 = Target angle limit: <<1>>
		// Title of the module to present in the editor details window.
		#kasLOC_00010 = KAS Joint

		// ********** Type: KAS.ControllerWinchRemote, KSPDev Messages

		// The title of the remote control dialog. It also gives a hint on the keyboard
		// sequence that brings the GUI up.
		// Argument <<1>> is the keyboard even of type KeyboardEventType.
		#kasLOC_11000 = Winch Remote Control (<<1>>)
		// The caption of the button that triggers cable release.
		#kasLOC_11001 = Release
		// The GUI hint to explain the effect of the release button.
		#kasLOC_11002 = Release the connector and set cable length to the maximum
		// The caption of the button that stretches teeh cable.
		#kasLOC_11003 = Stretch
		// The GUI hint to explain the effect of the stretch button.
		#kasLOC_11004 = Set the cable length to the actual distance
		// The caption of the button that deatches the cable from the target.
		#kasLOC_11005 = Detach
		// The GUI hint to explain the effect of the detach button.
		#kasLOC_11006 = Detach the cable from the target part
		// The caption of the button that closes the GUI dialog.
		#kasLOC_11007 = Close
		// The GUI hint to explain the effect of the close button.
		#kasLOC_11008 = Close GUI
		// The caption for the toggle control (button style) which tells if the winch should
		// be highlighted in the scene. It's better keep the text as short as possible.
		#kasLOC_11009 = H
		// The GUI hint to explain the effect of toggling the control.
		#kasLOC_11010 = Highlight the winch in the scene
		// The text for the winch status in which it cannot be remotely operated for any
		// reason.
		#kasLOC_11011 = <gui:min:150,0><color=red>Offline</color>
		// The GUI hint to explain the OFFLINE state.
		#kasLOC_11012 = Cannot contact the winch. Is the vessel controllable?
		// The text for the winch status that tells that the main winch attach node is
		// occupied by an incompatible (non-KAS) part.
		#kasLOC_11013 = <gui:min:150,0><color=red>Blocked</color>
		// The GUI hint to explain the BLOCKED state.
		#kasLOC_11014 = Winch attach node is blocked by another part
		// The text for the winch status that tells that the cable connector is locked to
		// the winch, and the cable length is zero.
		#kasLOC_11015 = <gui:min:150,0><color=#00ff00>Retracted</color>
		// The GUI hint to explain the RETRACTED state.
		#kasLOC_11016 = The connector is locked into the winch
		// The GUI hint of the button that triggers retracting of the cable. The cable will
		// be retracting until the motor status is changed or the connector get locked.
		#kasLOC_11017 = Start retracting the cable
		// The GUI hint of the button that triggers deploying of the cable. The cable will
		// be deploying until the motor status is changed.
		#kasLOC_11018 = Start extending the cable
		// The GUI hint of the button that retracts the cable. The cable will be retracting
		// as long as the button is pressed.
		#kasLOC_11019 = Retract the cable
		// The GUI hint of the button that extends the cable. The cable will be extending as
		// long as the button is pressed.
		#kasLOC_11020 = Extend the cable
		// The GUI hint to show for the control that changes the motor speed. It's the
		// maximum speed which the motor can reach when retracting or extending the cable.
		#kasLOC_11021 = Motor speed setting
		// The GUI hint to show for the area which displays two values: the deployed cable
		// length and the real distance between the winch and the target (connector or
		// part). The values are presented as a pair, separated by symbol '/'.
		#kasLOC_11022 = The deployed/real length of the cable
		// The GUI hint to show for the area which displays two values: the current motro
		// speed and the maximum possible motor speed. The values are presented as a pair,
		// separated by symbol '/'.
		#kasLOC_11023 = Current motor speed / Motor speed setting
		// The string to present when the dialog is opened, but no KAS winches found in the
		// scene.
		#kasLOC_11024 = No winches found in the scene!
		// The formatter string for the cable lengths when the cable is *not* under strain.
		// I.e. its actual length is not greater than the winch allows.
		// Argument <<1>> is the length, allowed by the winch of type DistanceType.
		// Argument <<1>> is the real cable length of type DistanceType.
		#kasLOC_11025 = <gui:min:150,0><<1>> / <<2>>
		// The formatter string for the cable lengths when the cable *is* under strain. I.e.
		// its actual length is greater than the winch allows.
		// Argument <<1>> is the length, allowed by the winch of type DistanceType.
		// Argument <<2>> is the real cable length of type DistanceType.
		#kasLOC_11026 = <gui:min:150,0><<1>> / <color=magenta><<2>></color>
		// The formatter string for the winch motor speed.
		// Argument <<1>> is the current motor speed type VelocityType.
		// Argument <<2>> is the settings for the desired motor speed of type VelocityType.
		#kasLOC_11027 = <gui:min:150,0><<1>> / <<2>>

		// ********** Type: KAS.KASJointCableBase, KSPDev Messages

		// Info string in the editor for the cable spring force setting.
		// Argument <<1>> is the force of type ForceType.
		// Example usage:
		// Spring force: 1.2 kN
		#kasLOC_09000 = Spring force: <<1>>
		// Title of the module to present in the editor details window.
		#kasLOC_09001 = KAS Cable

		// ********** Type: KAS.KASJointTowBar, KSP Events

		// A context menu event that starts the locking process on a linked vessel.
		#kasLOC_05014 = Start locking
		// A context menu event that disables the locking of the tow bar joints and turns
		// off the active steering mode.
		#kasLOC_05015 = Unlock joint
		// A context menu event that enables the active steering mode.
		#kasLOC_05016 = Enable active steering
		// A context menu event that disables the active steering mode.
		#kasLOC_05017 = Disable active steering

		// ********** Type: KAS.KASJointTowBar, KSP Fields

		// A context menu item that displays the current status of the bar locking.
		#kasLOC_05010 = Lock status
		// A context menu item that displays the current steering status.
		#kasLOC_05011 = Steering status
		// A context menu item that displays and allows changing the strength of the
		// steering commands, that the tow bar sends to the linked vessel.
		#kasLOC_05012 = Steering sensitivity
		// A context menu item that displays and allows changing the direction of the
		// steering commands.
		#kasLOC_05013 = Steering: Direction
		// The name of the active steering mode, in which the steering commands are sent to
		// the linked vessel in the exact form as they've emitted for the source vessel.
		#kasLOC_05018 = Normal
		// The name of the active steering mode, in which the steering commands are sent to
		// the linked vessel in the inverted form relative to the source vessel.
		#kasLOC_05019 = Inverted

		// ********** Type: KAS.KASJointTowBar, KSPDev Messages

		// Message to display when a tow bar is not locked but the locking process has been
		// started. The <<1>> argument shows the current locking error and is formatted as
		// an angle type.
		// Example usage:
		// Tow bar is locking: diff 1.5°
		#kasLOC_05000 = Tow bar is locking: diff <<1>>
		// Message to display when a tow bar locking process successfully ends with locking.
		#kasLOC_05001 = Tow bar is LOCKED!
		// A string in the context menu that tells that the active steering mode is not
		// enabled.
		#kasLOC_05002 = Disabled
		// A string in the context menu that tells that the active steering mode is ready
		// and working.
		#kasLOC_05003 = Active
		// A string in the context menu that tells that the active steering mode cannot work
		// due to the bar's target vessel is currently under player's control.
		#kasLOC_05004 = Target is active vessel
		// A string in the context menu that tells that the active steering mode cannot work
		// due to the linked vessel is remotely controlled.
		#kasLOC_05005 = Target is uncontrollable
		// A string in the context menu that tells that the active steering mode is
		// activated but cannot start working due to the constraints.
		#kasLOC_05006 = Not locked
		// A string in the context menu that tells that the bar joints are unlocked.
		#kasLOC_05007 = Disabled
		// A string in the context menu that tells that the bar joints are locked.
		#kasLOC_05008 = Locked
		// A string in the context menu that tells that the bar joints are unlocked but the
		// part is trying to lock them.
		#kasLOC_05009 = Locking

		// ********** Type: KAS.KASLinkResourceConnector, KSP Events

		// The context menu event that opens the resources transfer GUI.
		#kasLOC_12015 = Open GUI

		// ********** Type: KAS.KASLinkResourceConnector, KSPDev Messages

		// The title of the resource transfer dialog.
		#kasLOC_12000 = Resource Transfer
		// The resource in the transfer options table. Its main purpose is dealing with the
		// Lingoona modifiers, applied to the resource name.
		// Argument <<1>> is the full localized resource name with the Lingoona modifiers
		// (if any).
		#kasLOC_12001 = <<1>>
		// The string to present for a fuel mixture component.
		// Argument <<1>> is the percent ratio of the component in the mixture of type
		// PercentType.
		// Argument <<2>> is the abbreviated localized resource name with the
		// Lingoonamodifiers (if any).
		// Example usage:
		// 45 % Ox
		#kasLOC_12002 = <<1>> <<2>>
		// The status string saying current and maximum amounts of the resource in the
		// vessel. The gui tags are suggested to define the minimum size of the text, to
		// avoid the dialog flickering when the resource is being transferred.
		// Argument <<1>> is the current amount of type CompactNumberType.
		// Argument <<1>> is the maximum amount (capacity) of type CompactNumberType.
		// Example usage:
		// 2.56 / 1,234
		#kasLOC_12003 = <gui:min:100,0><<1>> / <<2>>
		// The information string that tells what is the selected or calculated tarnsfer
		// speed is.
		#kasLOC_12004 = Current transfer speed: <<1>> units per second
		// The caption on the button that closes the trsnafer dialog.
		#kasLOC_12005 = Close dialog
		// The string that tells which vessels owns the resource transfer part. Its stats
		// are displayed on the left side of the dialog.
		// Argument <<1>> is the name of the owner vessel.
		#kasLOC_12006 = Owner (left): <<1>>
		// The string that tells which vessels is connected to the resource transfer part.
		// Its stats are displayed on the right side of the dialog.
		// Argument <<1>> is the name of the connected vessel.
		#kasLOC_12007 = Connected (right): <<1>>
		// The hint to explain the mixture of the fuel components to transfer.
		// Argument <<1>> is the comma-separated list of the component names.
		#kasLOC_12008 = A mixture of components: <<1>>
		// The caption for the control that enables the mode, which automatically deducts
		// the speed of the reasource transfer.
		#kasLOC_12009 = Auto scale transfer speed
		// The GUI hint that explains what will happen if the auto-speed options is chosen.
		#kasLOC_12010 = The speed will be set so that the transfer is complete in <<1>> seconds
		// The hint text to explain the button action that starts transferring the resource
		// from the connected vessel to the owner of the resource transfer part.
		#kasLOC_12011 = Trigger transfer from the connected vessel to the owner
		// The hint text to explain the button action that does transferring the resource
		// from the connected vessel to the owner of the resource transfer part. When the
		// button is released, the transfer stops.
		#kasLOC_12012 = Transfer from the connected vessel to the owner
		// The hint text to explain the button action that starts transferring the resource
		// from the owner of the resources transfer part to the connected vessel.
		#kasLOC_12013 = Trigger transfer from the owner vessel to the connected vessel
		// The hint text to explain the button action that does transferring the resource
		// from the owner of the resource transfer part to the connected vessel. When the
		// button is released, the transfer stops.
		#kasLOC_12014 = Transfer from the owner vessel to the connected vessel
		// The message to present in the transfer dialog when the parts are docked. Hence,
		// the stock game functionality must be used to transfer the resources.
		#kasLOC_12016 = Not available in the docked mode

		// ********** Type: KAS.KASLinkSourceBase, KSPDev Messages

		// Message to display when the target link type doesn't match the source type.
		#kasLOC_02000 = Incompatible target link type
		// Message to display when a source is refusing to start the link.
		#kasLOC_02001 = Source is not available for a link
		// Message to display when the target is refusing to accept the link.
		#kasLOC_02002 = Target doesn't accept links
		// Message to display when a linked source and target cannot be matched on load.
		// Argument <<1>> is a name of the SOURCE part.
		// Example usage:
		// Cannot restore link for: KAS.TJ1
		#kasLOC_02003 = Cannot restore link for: <<1>>
		// Info string in the editor for the link type setting.
		// Argument <<1>> is the type string from the part's config.
		#kasLOC_02004 = Links with socket type: <<1>>
		// Title of the module to present in the editor details window.
		#kasLOC_02005 = KAS Joint Source
		// The name of the part's context menu event that triggers a separtation of the
		// linked parts into two different vessels if they are coupled thru this link. At
		// the same time, the name of the event gives a currently selected state.
		#kasLOC_02006 = Link mode: DOCKED
		// The name of the part's context menu event that triggers a merging of the linked
		// parts if they were not coupled before. At  the same time, the name of the event
		// gives a currently selected state.
		#kasLOC_02007 = Link mode: UNDOCKED

		// ********** Type: KAS.KASLinkSourceInteractive, KSPDev Messages

		// The message to display when a compatible target part is hovered over, and the
		// source is in the linking mode.
		// Argument <<1>> is the possible link length of type DistanceType.
		// Example usage:
		// Click to establish a link (length 1.22 m)
		#kasLOC_01000 = Click to establish a link (length <<1>>)
		// The message to display as a help string when an interactive linking mode has
		// started.
		#kasLOC_01001 = Select a compatible socket or press ESC
		// The message to present when the player requests a docking mode for the link via
		// UI, but the source or target part is rejecting the action.
		#kasLOC_01002 = Cannot dock: the mode is not supported

		// ********** Type: KAS.KASLinkSourcePhysical, KSP Events

		// A context menu event that attaches the connector to the EVA kerbal.
		#kasLOC_13007 = Grab connector
		// A context menu event that detaches the connector from the kerbal and puts it back
		// to the winch.
		#kasLOC_13008 = Return connector
		// Context menu item to break the currently established link.
		#kasLOC_13009 = Detach connector
		// Advanced tweakable. Context menu item to instantly lock the deployed connector
		// into the base.
		#kasLOC_13010 = Lock connector

		// ********** Type: KAS.KASLinkSourcePhysical, KSP Fields

		// Status field to display the current winch connector status in the context menu.
		#kasLOC_13006 = Connector state

		// ********** Type: KAS.KASLinkSourcePhysical, KSPDev Messages

		// A string in the context menu that tells that the connector is rigidly attached to
		// the part and is not movable.
		#kasLOC_13000 = Locked
		// A string in the context menu that tells that the connector is deployed and
		// attached to the part via a cable.
		#kasLOC_13001 = Deployed
		// A string in the context menu that tells that the connector is plugged in a socked
		// or is being carried by a kerbal, and attached to the part via a cable.
		#kasLOC_13002 = Plugged in
		// A string in the context menu that tells that the connector is rigidly attached in
		// the winch socked, and the vessel on the connector is docked to the part owner
		// vessel.
		#kasLOC_13003 = Docked
		// A message to display when a link between the part and the connector has broke due
		// to the unexpected external forces or actions.
		#kasLOC_13004 = The link between the connector and the part has broke
		// The error message to present when a part is being attached externally to the
		// source's attach node, and it's not a valid link target for the source.
		// Argument <<1>> is the name of the part being attached.
		#kasLOC_13005 = Cannot link with: <<1>>

		// ********** Type: KAS.KASLinkTargetBase, KSPDev Messages

		// Info string in the editor for the link type setting.
		// Argument <<1>> is the type string from the part's config.
		#kasLOC_03000 = Accepts link type: <<1>>
		// Title of the module to present in the editor details window.
		#kasLOC_03001 = KAS Joint Target

		// ********** Type: KAS.KASLinkTargetKerbal, KSP Events

		// A context menu item that picks up the cable connector in range.
		#kasLOC_10000 = Pickup connector

		// ********** Type: KAS.KASLinkTargetKerbal, KSPDev Messages

		// A hint string, instructing what to press in order to drop the currently
		// carriedcable connector.
		// Argument <<1>> is the current key binding of type KeyboardEventType.
		// Example usage:
		// To drop the connector press: [Ctrl+Y]
		#kasLOC_100001 = To drop the connector press: [<<1>>]
		// A hint string, instructing what to press in order to pickup a cable
		// connectorwhich is currently in range.
		// Argument <<1>> is the current key binding of typeKeyboardEventType.
		// Example usage:
		// [Y]: Pickup connector
		#kasLOC_100002 = [<<1>>]: Pickup connector
		// Context menu item that appear on the target part and transfers the EVA carried
		// connector to it.
		#kasLOC_10003 = Attach connector

		// ********** Type: KAS.KASLinkWinch, KSP Events

		// A context menu item that opens the remote control GUI to operate the winches in
		// the scene.
		#kasLOC_08010 = Open winches GUI
		// A context menu item that sets the cable length ot the maximum, and unlocks the
		// connector if it was locked.
		#kasLOC_08011 = Release cable
		// A context menu event that sets the cable length to the current distance to the
		// connector.
		#kasLOC_08012 = Instant stretch

		// ********** Type: KAS.KASLinkWinch, KSP Fields

		// A context menu item that presents the length of the currently deployed cable.
		#kasLOC_08009 = Deployed cable length

		// ********** Type: KAS.KASLinkWinch, KSPDev Messages

		// Error message to present when the electricity charge has exhausted.
		#kasLOC_08000 = No energy!
		// Error message to present when an improperly aligned cable connector has attempted
		// to lock with the winch.
		#kasLOC_08001 = Cannot lock the connector: not aligned
		// Info message to present when a cable connector has successfully locked to the
		// winch.
		#kasLOC_08002 = Connector locked!
		// Info message to present when a cable connector has successfully docked to the
		// winch.
		#kasLOC_08003 = Connector docked to the winch
		// An info message to present when the cable is extended at its maximum length.
		// Argument <<1>> is the current cable length of type DistanceType.
		// Example usage:
		// Maximum cable length reached: 1.23 m
		#kasLOC_08004 = Maximum cable length reached: <<1>>
		// Name of the context menu item that stops the cable extending.
		#kasLOC_08005 = Stop extending
		// Name of the context menu item that starts the cable extending.
		#kasLOC_08006 = Extend cable
		// Name of the context menu item that stops the cable retracting.
		#kasLOC_08007 = Stop retracting
		// Name of the context menu item that starts the cable retracting.
		#kasLOC_08008 = Retract cable
		// Title of the module to present in the editor details window.
		#kasLOC_08013 = KAS Winch
		// Info string that tells how fast the winch can extend or retract the cable.
		// Argument <<1>> is the speed of type VelocityType.
		#kasLOC_08014 = Max motor speed: <<1>>

		// ********** Type: KAS.KASRendererPipe, KSPDev Messages

		// Message to display when the link cannot be created due to an obstacle.
		// Argument <<1>> is the part that would collide with the proposed link.
		// Example usage:
		// Link collides with: Mk2 Cockpit
		#kasLOC_07000 = Link collides with: <<1>>
		// Message to display when the link strut orientation cannot be changed due to it
		// would hit the surface.
		#kasLOC_07001 = Link collides with the surface

		// ********** Type: KAS.KASRendererTelescopicPipe, KSP Events

		// A context menu item that expands a non-linked telescopic pipe to its maximum
		// length.
		#kasLOC_04002 = Extend to max
		// A context menu item that shrinks a non-linked telescopic pipe to its minimum
		// length.
		#kasLOC_04003 = Retract to min

		// ********** Type: KAS.KASRendererTelescopicPipe, KSPDev Messages

		// Message to display when the link cannot be created due to an obstacle.
		// Argument <<1>> is the part that would collide with the proposed link.
		// Example usage:
		// Link collides with: Mk2 Cockpit
		#kasLOC_04000 = Link collides with: <<1>>
		// Message to display when the link strut orientation cannot be changed due to it
		// would hit the surface.
		#kasLOC_04001 = Link collides with the surface

		// ********** Global strings

		// Small strut link type.
		#kasLOC_99000 = Pipe-40
		// Small cable link type.
		#kasLOC_99001 = Cable-10
		// Small hose link type.
		#kasLOC_99002 = Hose-30
		// Medium strut link type.
		#kasLOC_99003 = Pipe-100
		// Medium cable link type.
		#kasLOC_99004 = Cable-35
		// Medium hose link type.
		#kasLOC_99005 = Hose-70
		// Large strut link type.
		#kasLOC_99006 = Pipe-150
		// Large cable link type.
		#kasLOC_99007 = Cable-60
		// Large hose link type.
		#kasLOC_99008 = Hose-100

		// KAS parts filter in the editor.
		#kasLOC_99009 = Kerbal Attachment System
	}
}
